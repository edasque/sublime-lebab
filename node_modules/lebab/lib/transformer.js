'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodashObjectMergeJs = require('lodash/object/merge.js');

var _lodashObjectMergeJs2 = _interopRequireDefault(_lodashObjectMergeJs);

var _recast = require('recast');

var _recast2 = _interopRequireDefault(_recast);

var _esformatter = require('esformatter');

var _esformatter2 = _interopRequireDefault(_esformatter);

var _utilsAstGeneratorJs = require('./utils/ast-generator.js');

var _utilsAstGeneratorJs2 = _interopRequireDefault(_utilsAstGeneratorJs);

// Transformers

var _transformationClassesJs = require('./transformation/classes.js');

var _transformationClassesJs2 = _interopRequireDefault(_transformationClassesJs);

var _transformationTemplateStringJs = require('./transformation/template-string.js');

var _transformationTemplateStringJs2 = _interopRequireDefault(_transformationTemplateStringJs);

var _transformationArrowFunctionsJs = require('./transformation/arrow-functions.js');

var _transformationArrowFunctionsJs2 = _interopRequireDefault(_transformationArrowFunctionsJs);

var _transformationLetJs = require('./transformation/let.js');

var _transformationLetJs2 = _interopRequireDefault(_transformationLetJs);

var _transformationDefaultArgumentsJs = require('./transformation/default-arguments.js');

var _transformationDefaultArgumentsJs2 = _interopRequireDefault(_transformationDefaultArgumentsJs);

var _transformationObjectMethodsJs = require('./transformation/object-methods.js');

var _transformationObjectMethodsJs2 = _interopRequireDefault(_transformationObjectMethodsJs);

var Transformer = (function () {

  /**
   * @constructor
   */

  function Transformer() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Transformer);

    this.ast = {};
    this.options = (0, _lodashObjectMergeJs2['default'])(this.constructor.defaultOptions, options);
    this.transformations = [];

    this.prepareTransformations();
  }

  /**
   * Prepare transformations array by give options
   */

  _createClass(Transformer, [{
    key: 'prepareTransformations',
    value: function prepareTransformations() {
      var _this = this;

      var shouldTransform = function shouldTransform(key) {
        return typeof _this.options.transformers[key] !== 'undefined' && _this.options.transformers[key];
      };

      var doTransform = function doTransform(key, transformation) {
        if (shouldTransform(key)) {
          _this.transformations.push(transformation);
        }
      };

      doTransform('classes', _transformationClassesJs2['default']);
      doTransform('stringTemplates', _transformationTemplateStringJs2['default']);
      doTransform('arrowFunctions', _transformationArrowFunctionsJs2['default']);
      doTransform('let', _transformationLetJs2['default']);
      doTransform('defaultArguments', _transformationDefaultArgumentsJs2['default']);
      doTransform('objectMethods', _transformationObjectMethodsJs2['default']);
    }

    /**
     * Prepare the abstract syntax tree for given file
     *
     * @param filename
     */
  }, {
    key: 'readFile',
    value: function readFile(filename) {

      this.ast = _utilsAstGeneratorJs2['default'].readFile(filename, {
        sync: true,
        ecmaVersion: 6
      });
    }

    /**
     * Prepare an abstract syntax tree for given code in string
     *
     * @param string
     */
  }, {
    key: 'read',
    value: function read(string) {

      this.ast = _utilsAstGeneratorJs2['default'].read(string, this.options);
    }

    /**
     * Apply a transformation on the AST
     *
     * @param transformation
     */
  }, {
    key: 'applyTransformation',
    value: function applyTransformation(transformation) {

      transformation(this.ast);
    }

    /**
     * Apply All transformations
     */
  }, {
    key: 'applyTransformations',
    value: function applyTransformations() {

      for (var i = 0; i < this.transformations.length; i++) {
        var transformation = this.transformations[i];
        this.applyTransformation(transformation);
      }
    }

    /**
     * Returns the code string
     *
     * @returns {Object}
     */
  }, {
    key: 'out',
    value: function out() {
      var result = _recast2['default'].print(this.ast).code;

      if (this.options.formatter !== false) {
        result = _esformatter2['default'].format(result, this.options.formatter);
      }

      return result;
    }

    /**
     * Writes the code on file
     *
     * @param filename
     * @param callback
     */
  }, {
    key: 'writeFile',
    value: function writeFile(filename, callback) {

      var code = this.out();

      if (typeof callback === 'function') {
        _fs2['default'].writeFile(filename, code, callback);
      } else {
        _fs2['default'].writeFileSync(filename, code);
      }
    }
  }]);

  return Transformer;
})();

exports['default'] = Transformer;

Transformer.defaultOptions = {
  transformers: {
    classes: true,
    stringTemplates: true,
    arrowFunctions: true,
    'let': true,
    defaultArguments: true,
    objectMethods: true
  },
  formatter: false
};
module.exports = exports['default'];